# Generated by Django 4.2.20 on 2025-09-03 19:15

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import gallery.models
import gallery.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, help_text='Человекопонятный URL (автозаполнение)', unique=True, verbose_name='Slug')),
                ('name', models.CharField(help_text='Например: США, Россия, Италия', max_length=50, unique=True, verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kinopoisk_api_id', models.PositiveIntegerField(blank=True, db_index=True, null=True, verbose_name='ID API Kinopoisk')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Название (на русском)')),
                ('alternative_name', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Альтернативное название')),
                ('en_name', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Название на английском')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('short_description', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(500)], verbose_name='Краткое описание')),
                ('slogan', models.CharField(blank=True, max_length=255, null=True, verbose_name='Слоган')),
                ('year', models.IntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(1888, message='Первый фильм вышел в 1888 году.'), gallery.validators.validate_max_future_year], verbose_name='Год выпуска фильма')),
                ('movie_length', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, 'Не может быть меньше 1'), django.core.validators.MaxValueValidator(1000, 'Длительность не может быть больше 1000 минут.')], verbose_name='Длительность фильма в минутах')),
                ('rating_mpaa', models.CharField(blank=True, max_length=10, null=True, verbose_name='Рейтиг MPAA')),
                ('age_rating', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Возрастной рейтинг')),
                ('budget_value', models.PositiveIntegerField(blank=True, null=True, verbose_name='Бюджет фильма')),
                ('budget_currency', models.CharField(blank=True, max_length=10, null=True, verbose_name='Валюта бюджета')),
                ('is_series', models.BooleanField(blank=True, default=False, verbose_name='Сериал или нет')),
                ('series_length', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, 'Не может быть меньше 1'), django.core.validators.MaxValueValidator(1000, 'Длительность не может быть больше 1000 минут.')], verbose_name='Длительность одной серии в минутах')),
                ('total_series_length', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, 'Не может быть меньше 1')], verbose_name='Длительность всего сериала в минутах')),
                ('poster', models.ImageField(upload_to=gallery.models.films_photos_path, verbose_name='Постер')),
                ('logo', models.ImageField(upload_to=gallery.models.films_photos_path, verbose_name='Лого')),
                ('backdrop', models.ImageField(upload_to=gallery.models.films_photos_path, verbose_name='Обои')),
            ],
            options={
                'verbose_name': 'Фильм (серил и др.)',
                'verbose_name_plural': 'Фильмы (сериалы и др.)',
                'ordering': ['year', 'id'],
            },
        ),
        migrations.CreateModel(
            name='FilmPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='Описание роли, которую исполнил актре в фильме', max_length=255, null=True, verbose_name='Описание роли, которую исполнил актре в фильме')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_persons', to='gallery.film')),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, help_text='Человекопонятный URL (автозаполнение)', unique=True, verbose_name='Slug')),
                ('name', models.CharField(help_text='Например: Драма, Комедия, Ужасы', max_length=50, unique=True, verbose_name='Жанр')),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, help_text='Человекопонятный URL (автозаполнение)', unique=True, verbose_name='Slug')),
                ('name', models.CharField(help_text='Например: Netfilx, HBO, Apple TV', max_length=50, unique=True, verbose_name='Стриминговый сервис')),
            ],
            options={
                'verbose_name': 'Стриминговый сервис',
                'verbose_name_plural': 'Стриминговые сервисы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kinopoisk_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='ID на Кинопоиск')),
                ('name', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Имя и фамилия на русском')),
                ('en_name', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Имя и фамилия на английском')),
                ('growth', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Рост в см')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('death', models.DateField(blank=True, null=True, verbose_name='Дата смерти')),
                ('photo', models.ImageField(upload_to=gallery.models.persons_photos_path, verbose_name='Фото')),
            ],
            options={
                'verbose_name': 'Персона',
                'verbose_name_plural': 'Персоны',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profession', models.CharField(max_length=30, unique=True, verbose_name='Профессия на русском')),
                ('en_profession', models.CharField(max_length=30, unique=True, verbose_name='Профессия на английском')),
            ],
            options={
                'verbose_name': 'Профессия',
                'verbose_name_plural': 'Профессии',
                'ordering': ['profession'],
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, help_text='Человекопонятный URL (автозаполнение)', unique=True, verbose_name='Slug')),
                ('name', models.CharField(help_text='Например: Фильм, Сериал, Мультфильм', max_length=50, unique=True, verbose_name='Тип')),
            ],
            options={
                'verbose_name': 'Тип',
                'verbose_name_plural': 'Типы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, max_length=255, null=True, unique=True, verbose_name='Ссылка')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название видео')),
                ('site', models.CharField(blank=True, max_length=50, null=True, verbose_name='Название сайта')),
                ('type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип видео')),
                ('film', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='videos', to='gallery.film', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Видео',
                'verbose_name_plural': 'Видео',
                'ordering': ['film', 'type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SimilarFilms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_films', to='gallery.film', verbose_name='Фильм')),
                ('similar_film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gallery.film', verbose_name='Похожий фильм')),
            ],
            options={
                'verbose_name': 'Похожий фильм',
                'verbose_name_plural': 'Похожие фильмы',
            },
        ),
        migrations.CreateModel(
            name='SequelsAndPrequels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sequels_and_prequels', to='gallery.film', verbose_name='Фильм')),
                ('related_film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gallery.film', verbose_name='Связанынй фильм (сиквел, приквел и тд.)')),
            ],
            options={
                'verbose_name': 'Сиквелы, приквелы и тд.',
                'verbose_name_plural': 'Сиквелы, приквелы и тд.',
            },
        ),
        migrations.CreateModel(
            name='FilmPersonProfession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('film_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professions', to='gallery.filmperson')),
                ('profession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_person_professions', to='gallery.profession')),
            ],
        ),
        migrations.AddField(
            model_name='filmperson',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films', to='gallery.person'),
        ),
        migrations.CreateModel(
            name='FilmNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_networks', to='gallery.film')),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films', to='gallery.network')),
            ],
        ),
        migrations.CreateModel(
            name='FilmGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_genres', to='gallery.film', verbose_name='Фильм (сериал и тд.)')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films', to='gallery.genre', verbose_name='Жанр')),
            ],
        ),
        migrations.CreateModel(
            name='FilmCountry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='films', to='gallery.country')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_countries', to='gallery.film')),
            ],
        ),
        migrations.AddField(
            model_name='film',
            name='countries',
            field=models.ManyToManyField(through='gallery.FilmCountry', to='gallery.country', verbose_name='Страны'),
        ),
        migrations.AddField(
            model_name='film',
            name='genres',
            field=models.ManyToManyField(through='gallery.FilmGenre', to='gallery.genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='film',
            name='networks',
            field=models.ManyToManyField(through='gallery.FilmNetwork', to='gallery.network', verbose_name='Стриминговые сервисы'),
        ),
        migrations.AddField(
            model_name='film',
            name='persons',
            field=models.ManyToManyField(through='gallery.FilmPerson', to='gallery.person', verbose_name='Персоны'),
        ),
        migrations.AddField(
            model_name='film',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='films', to='gallery.type', verbose_name='Тип'),
        ),
        migrations.CreateModel(
            name='Fees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place', models.CharField(max_length=50, verbose_name='Тип сброров')),
                ('value', models.PositiveIntegerField(blank=True, null=True, verbose_name='Сумма')),
                ('currency', models.CharField(blank=True, max_length=5, null=True, verbose_name='Валюта')),
                ('film', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fees', to='gallery.film', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Сборы',
                'verbose_name_plural': 'Сборы',
                'ordering': ['film', 'place'],
            },
        ),
        migrations.CreateModel(
            name='Fact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(default='', verbose_name='Текст')),
                ('type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип факта')),
                ('spoiler', models.BooleanField(default=False, verbose_name='Спойлер или нет')),
                ('film', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='facts', to='gallery.film', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Факт',
                'verbose_name_plural': 'Факты',
                'ordering': ['film', 'type', 'pk'],
            },
        ),
        migrations.CreateModel(
            name='AgregatorInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Значение')),
                ('votes', models.PositiveIntegerField(verbose_name='Количество оценок')),
                ('source', models.CharField(max_length=50, verbose_name='Ресурс')),
                ('film', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agregators', to='gallery.film', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Данные агрегатора',
                'verbose_name_plural': 'Данные агрегаторов',
                'ordering': ['film', 'source', 'pk'],
            },
        ),
    ]
